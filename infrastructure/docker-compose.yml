networks:
  frontend:
  backend:

volumes:
  pgdata:
  opdata:
  grafana-data:
  jenkins-data:
  influx-data:

x-op-restart-policy: &restart_policy
  restart: unless-stopped
x-op-image: &image
  image: openproject/openproject:${TAG:-15-slim}
x-op-app: &app
  <<: [*image, *restart_policy]
  environment:
    OPENPROJECT_HTTPS: "true"
    OPENPROJECT_HOST__NAME: "open-project.aniway.space"
    OPENPROJECT_HSTS: "${OPENPROJECT_HSTS:-true}"
    RAILS_CACHE_STORE: "memcache"
    OPENPROJECT_CACHE__MEMCACHE__SERVER: "cache:11211"
    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
    DATABASE_URL: "${DATABASE_URL:-postgres://postgres:p4ssw0rd@db/openproject?pool=20&encoding=unicode&reconnect=true}"
    RAILS_MIN_THREADS: ${RAILS_MIN_THREADS:-4}
    RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-16}
    # set to true to enable the email receiving feature. See ./docker/cron for more options
    IMAP_ENABLED: "${IMAP_ENABLED:-false}"
  volumes:
    - "${OPDATA:-opdata}:/var/openproject/assets"
    - "./enterprise_token.rb:/app/app/models/enterprise_token.rb:ro"

services:
  grafana:
    image: grafana/grafana:latest
    <<: *restart_policy
    environment:
      - GF_SERVER_ROOT_URL=https://grafana.aniway.space
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    ports:
      - "3000:3000"
    depends_on:
      - influxdb
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - frontend
    labels:
      - autoheal=true

  influxdb:
    image: influxdb:2.7
    <<: *restart_policy
    ports:
      - "7000:7000"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=TCINdNJSlHjLLcy
      - DOCKER_INFLUXDB_INIT_ORG=AniWay
      - DOCKER_INFLUXDB_INIT_BUCKET=AniWayBucket
    volumes:
      - influx-data:/var/lib/influxdb2
    networks:
      - frontend
    labels:
      - autoheal=true

  jenkins:
    image: jenkins/jenkins:lts
    <<: *restart_policy
    ports:
      - "4000:4000"
    volumes:
      - jenkins-data:/var/jenkins_home # Для сохранения данных Jenkins
    networks:
      - frontend # Подключение к той же сети, что и прокси
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Dhudson.diyChunking=false -Djenkins.model.Jenkins.STRICT_FORWARDING=true
      - JENKINS_OPTS=--httpPort=4000 --prefix=/
    labels:
      - autoheal=true # Включение автохила

  db:
    image: postgres:13
    <<: *restart_policy
    stop_grace_period: "3s"
    volumes:
      - "${PGDATA:-pgdata}:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-p4ssw0rd}
      POSTGRES_DB: openproject
    networks:
      - backend

  cache:
    image: memcached
    <<: *restart_policy
    networks:
      - backend

  proxy:
    build:
      context: ./proxy
      args:
        APP_HOST: web
    image: openproject/proxy
    <<: *restart_policy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - frontend
    volumes:
      - /etc/caddy/certs:/etc/caddy/certs

  web:
    <<: *app
    command: "./docker/prod/web"
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - cache
      - seeder
    labels:
      - autoheal=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}/health_checks/default"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  autoheal:
    image: willfarrell/autoheal:1.2.0
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      AUTOHEAL_CONTAINER_LABEL: autoheal
      AUTOHEAL_START_PERIOD: 600
      AUTOHEAL_INTERVAL: 30

  worker:
    <<: *app
    command: "./docker/prod/worker"
    networks:
      - backend
    depends_on:
      - db
      - cache
      - seeder

  cron:
    <<: *app
    command: "./docker/prod/cron"
    networks:
      - backend
    depends_on:
      - db
      - cache
      - seeder

  seeder:
    <<: *app
    command: "./docker/prod/seeder"
    restart: on-failure
    networks:
      - backend
